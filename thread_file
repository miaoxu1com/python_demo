import threading
import time

# 定义一个锁，用于保护文件操作
file_lock = threading.Lock()


def writer(file_path):
    with open(file_path, 'a') as file:
        for i in range(10):
            # 使用锁确保线程安全
            with file_lock:
                file.write(f'Writing line {i}\n')
            time.sleep(1)  # 模拟耗时操作


def reader(file_path):
    i = 0
    while True:
        i = i + 1
        # 使用锁确保线程安全
        with file_lock:
            with open(file_path, 'r') as file:
                content = file.read()
                print(content)
        time.sleep(2)  # 给写线程一些时间写入数据


if __name__ == "__main__":
    file_path = 'shared_file.txt'

    # 创建写线程
    write_thread = threading.Thread(target=writer, args=(file_path,))
    # 创建读线程
    read_thread = threading.Thread(target=reader, args=(file_path,))

    # 启动线程
    write_thread.start()
    read_thread.start()

    # 等待写线程结束 在Python的多线程编程中，join() 方法用于等待一个线程完成其任务后再继续执行主线程。
    # 当你调用 join() 方法时，主线程会暂停执行，直到被调用 join() 的线程执行完毕或达到指定的超时时间（如果提供了的话）
    # write_thread.join() 的作用是确保写线程完成所有写入操作后，主线程才继续执行。
    # 如果没有这行代码，主线程可能在写线程完成之前就结束，这样可能会导致程序提前退出，而写线程可能还在运行，造成资源释放顺序混乱或数据丢失等问题
    # 通过使用 join() 方法，你可以控制线程之间的执行顺序，这对于确保程序正确执行、资源正确释放以及避免竞态条件（race conditions）非常重要。
    # 在处理多线程时，合理使用 join() 方法可以帮助你构建更稳定、更可靠的程序

    # 在多线程编程中，使用队列（Queue）有多个显著的好处，尤其在处理线程间通信和资源共享时。以下是一些主要优点：
    # 线程安全：队列在设计上就是线程安全的，这意味着多个线程可以安全地往队列里添加元素或从中取出元素，而无需额外的锁定或同步机制。
    # 这减少了死锁的风险，并简化了多线程编程的复杂性。
    # 数据缓冲和同步：队列可以作为生产者和消费者模型中的缓冲区，允许生产者线程在不阻塞的情况下将数据放入队列，而消费者线程可以从队列中取出数据进行处理。
    # 这有助于平衡不同线程之间的负载，特别是在生产速率和消费速率不匹配的情况下。
    # 阻塞和非阻塞操作：队列提供了阻塞和非阻塞的入队和出队操作。例如，当队列满时，put() 方法可以被配置为阻塞直到有空间可用，或者立即抛出异常。
    # 同样，当队列为空时，get() 方法可以阻塞直到有数据可用，或者立即返回一个特殊值。这种灵活性允许程序员根据应用程序的需求选择最合适的策略。
    # 资源管理：队列可以限制在内存中存储的数据量，防止因过度使用内存而导致的性能问题。例如，queue.Queue(maxsize) 允许你设定队列的最大大小。
    # 避免竞态条件：通过使用队列，你可以避免常见的竞态条件，比如多个线程同时访问同一资源。队列充当了一个中介，确保数据被有序和安全地传递。
    # 简化多线程编程：队列的使用使得线程之间的通信变得更加简单和直接。线程只需关注自己的任务，而不必关心其他线程何时开始或结束，这大大降低了多线程编程的复杂度。
    # 可扩展性：队列可以很容易地扩展到多进程或多机器环境，例如通过使用分布式队列系统，这使得队列成为构建分布式和并行计算解决方案的理想选择。

    write_thread.join()
    read_thread.join()

    # 由于读线程是无限循环的，我们不调用join()，而是让它在后台运行
    # 如果需要，可以通过设置一个标志来告诉读线程退出循环
