Python发现
运行 pip sync 或 pip install 时，UV将按以下顺序搜索虚拟环境：
基于 VIRTUAL_ENV 环境变量激活的虚拟环境。
基于 CONDA_PREFIX 环境变量的激活的CONDA环境
位于当前目录或最近父目录中 .venv 的虚拟环境
如果没有找到虚拟环境，UV会提示用户通过 uv venv 在当前目录中创建一个

运行 pip compile 时，UV不需要虚拟环境，并将按以下顺序搜索Python解释器
基于 VIRTUAL_ENV 环境变量激活的虚拟环境
基于 CONDA_PREFIX 环境变量的激活的CONDA环境。
位于当前目录或最近父目录中 .venv 的虚拟环境。
在MacOS和Linux上为 python3 ，在Windows上为 python.exe
如果 --python-version 提供给 pip compile (例如 --python-version=3.7 )，UV将按以下顺序搜索与该版本匹配的Python解释器：
基于 VIRTUAL_ENV 环境变量激活的虚拟环境
基于 CONDA_PREFIX 环境变量的激活的CONDA环境
位于当前目录或最近父目录中 .venv 的虚拟环境
例如，在MacOS和Linux上可以使用 python3.7 形式的Python解释器。
在MacOS和Linux上为 python3 ，在Windows上为 python.exe
在Windows上， py --list-paths 返回的与请求的版本匹配的Python解释器


持久配置
UV支持项目级和用户级的持久配置
具体来说，uv将在当前目录或最近的父目录中搜索 pyproject.toml 或 uv.toml 文件
如果找到 pyproject.toml 文件，UV将从 [tool.uv.pip] 表中读取配置。例如，要设置持久索引URL，请将以下内容添加到 pyproject.toml

[tool.uv.pip]
index-url = "https://test.pypi.org/simple"

(如果没有这样的表， pyproject.toml 文件将被忽略，UV将继续在目录层次结构中搜索。)
如果找到 uv.toml 文件，UV将从 [pip] 表中读取。例如：
[pip]
index-url = "https://test.pypi.org/simple"

UV还将在MacOS和Linux上的 ~/.config/uv/uv.toml (或 $XDG_CONFIG_HOME/uv/uv.toml )或Windows上的 %APPDATA%\uv\uv.toml 发现用户级配置。
用户级配置必须使用 uv.toml 格式，而不是 pyproject.toml 格式，因为 pyproject.toml 用于定义Python项目。
如果同时找到项目级配置和用户级配置，则将合并设置，并优先使用项目级配置。具体地说，如果两个表中都存在字符串、数字或布尔值，则将使用项目级值，而忽略用户级值。
如果两个表中都存在一个数组，则这些数组将串联在一起，项目级别的设置将出现在合并的数组中的较早位置。
环境变量提供的设置优先于持久配置，通过命令行提供的设置优先于两者
uv接受命令行参数--isolated，当提供该参数时，将禁用任何持久配置的发现
uv还接受命令行参数--config-file，该参数接受的路径以用作配置文件。提供后，此文件将用于代替任何发现的配置文件（例如，用户级配置将被忽略）
