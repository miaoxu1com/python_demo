在软件的设计当中前人已经总结了许多的设计原则和设计模式。例如 SOLID，GRASP 设计原则，这些原则都是基于面向对象设计总结而来的
而 GOF23 是基于许多常见的场景总结出了一套设计模式，在我们遇到类似的场景，都可以套用设计模式

需要大量计算的就用专门的计算模块，专门的计算模块可以提高计算效率提高代码的运行效率numpy就是专门计算的模块

理解 DRY、KISS、YAGNI 三原则
【设计模式】设计原则-SOLID、DRY、KISS、YAGNI、LOD
https://pythoncat.top/posts/2025-01-22-ai-llm
https://blog.csdn.net/yuanlaijike/article/details/101565237


https://blog.csdn.net/qq_33766994/article/details/115763033
1、保持简单和直接原则(KISS)
KISS：Keep it simple,stupid。
在软件开发过程中，把简单作为主要目标，避免做一些没有必要的复杂工作。

2、不需要原则(YAGNI)
YAGNI：You Aren’t Gonna Need It
不要写目前用不上，但将来也许需要的代码。在确定真的有必要的时候再写代码，那时再重构也来得及。

3、避免复制原则(DRY)
DRY：Don’t repeat yourself
保证在一个系统内部，任何一个知识点都必须有一个单一的、明确的、权威的陈述。

4、信息隐藏原则
一段代码调用了另外一段代码，那么调用者不应该知道被调用者的内部实现，否则，调用者就有可能通过修改被调用者的内部实现而完成某个功能，而不是强制要求调用者修改自己的代码。
优点：
1、限制了模块变更的范围
2、如果需要修复缺陷，对其他模块影响最小
3、显著提高模块的可复用性
4、模块具有更高的可测试性
信息隐藏：帮助开发人员找到好的设计模式的原则
封装：依赖于编程语言的技术，用于限制对模块内部的访问

5、高内聚原则
任何软件实体(模块、组件、单元、类、函数等)应该具有很高的内聚性，减少依赖关系。

6、松耦合原则
松耦合可以为系统的各个独立的模块提供高度的自治性。在软件设计中，松耦合的关键就是接口。高内聚会促进低耦合，因为具有明确定义职责的模块，通常会依赖较少的其他模块。

deepssek 函数可以 通过 什么方法进行 松耦合  还用假设你正在设计一个电商系统，其中有一个订单模块和一个支付模块 举例

    接口或抽象类：通过定义接口，让函数依赖抽象而不是具体实现。

    回调函数：将函数作为参数传递，减少直接依赖。

    事件驱动：通过事件进行通信，避免直接调用。

    依赖注入：将依赖关系从函数内部移到外部。
    
    事件驱动架构：通过事件总线实现模块之间的完全解耦。

    消息队列：通过消息队列实现模块之间的异步通信。

    服务发现与 API 网关：在微服务架构中，通过 API 网关和服务发现实现模块之间的松耦合。



7、 小心优化原则
只要没有明确的性能要求，就避免优化。

8、最少惊讶原则(PLA)
不应该让用户对用户界面的意外响应而感到惊讶。调用函数不应该让调用者感到异常行为或一些隐藏的副作用，函数应该完全按照函数名称指示的意义执行。

9、童子军原则
每当在一段代码中发现需要改进的或者风格不好的代码时，应立刻修正，与这段代码的原创作者是谁无关紧要。



高内聚原则的核心思想是让代码的功能更集中、更清晰。通过高内聚的设计，可以让代码更容易理解、维护和复用，从而提高软件的质量和开发效率
高内聚的好处

    代码更清晰：每个模块、类或函数只负责一件事，代码更容易理解和维护。

    复用性更强：功能集中的模块更容易被其他部分复用。

    修改更安全：修改一个模块时，不会影响到其他不相关的功能。

高内聚的例子

假设你正在设计一个电商系统，其中有一个模块负责处理订单。高内聚的设计会让这个模块只做与订单相关的事情，比如：

    创建订单

    取消订单

    查询订单状态

而不应该把与订单无关的功能（比如用户登录、商品管理）放在这个模块中。

低内聚的反例

如果订单模块还包含了用户登录、商品管理等功能，这就是低内聚的设计。这样的模块会变得复杂、难以维护，修改一个功能可能会影响到其他不相关的功能。

如何实现高内聚？

    单一职责原则：每个模块、类或函数只负责一件事。

    功能分组：把相关的功能放在一起，不相关的功能分开。

    模块化设计：将系统拆分为多个独立的模块，每个模块专注于一个特定的功能。
