import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.header import Header
import os
import mimetypes
#https://blog.csdn.net/sdexcel/article/details/140456153
def read_recipients_from_file(file_path):
    """从指定文件中读取收件人列表"""
    with open(file_path, 'r') as file:
        recipients = file.read().splitlines()
    return recipients

def send_email(sender, password, recipient, subject, text_body, html_body, attachment_path, smtp_server, smtp_port):
    """发送带 multipart/alternative 正文和附件的电子邮件"""
    try:
        # 创建MIMEMultipart对象
        msg = MIMEMultipart('mixed')
        msg['From'] = sender
        msg['To'] = recipient
        msg['Subject'] = subject

        # 创建multipart/alternative部分
        alternative = MIMEMultipart('alternative')
        msg.attach(alternative)

        # 添加纯文本正文
        part1 = MIMEText(text_body, 'plain', 'utf-8')
        alternative.attach(part1)

        # 添加HTML正文
        part2 = MIMEText(html_body, 'html', 'utf-8')
        alternative.attach(part2)

        # 添加附件
        if os.path.exists(attachment_path):
            with open(attachment_path, "rb") as attachment:
                ctype, encoding = mimetypes.guess_type(attachment_path)
                if ctype is None or encoding is not None:
                    ctype = 'application/octet-stream'
                
                maintype, subtype = ctype.split('/', 1) if ctype else ('application', 'octet-stream')
                
                part = MIMEBase(maintype, subtype)
                part.set_payload(attachment.read())
                encoders.encode_base64(part)
                
                # 使用Header来编码文件名，并指定utf-8和Quoted-Printable编码
                encoded_filename = Header(os.path.basename(attachment_path), 'utf-8').encode('utf-8', 'qp')
                part.add_header('Content-Disposition', f'attachment; filename="{encoded_filename}"')
                
                # 将附件附加到消息中
                msg.attach(part)

        # 连接到SMTP服务器
        if smtp_port == 465:
            # 如果使用端口465，则直接使用SSL
            server = smtplib.SMTP_SSL(smtp_server, smtp_port)
        else:
            # 使用其他端口（如587），则先连接再启用TLS
           with smtplib.SMTP(smtp_server, smtp_port) as s:
		server = smtplib.SMTP(smtp_server, smtp_port)
		server.starttls()
		# 登录SMTP服务器
		server.login(sender, password)
	       # 发送邮件
                server.send_message(msg)
        print(f'邮件已成功发送至: {recipient}')
    except smtplib.SMTPAuthenticationError as e:
        print(f"SMTP认证错误: {e}")
    except smtplib.SMTPException as e:
        print(f"SMTP错误: {e}")
    except Exception as e:
        print(f"未知错误: {e}")

def main():
    # 发送者的邮箱和密码
    sender = 'sender1@bor.com'
    password = 'your_password'

    # SMTP服务器配置
    smtp_server = 'smtp.bor.com'
    smtp_port = 25  # 可以根据需要更改为465或其他端口

    # 读取收件人列表
    recipients = read_recipients_from_file('recipients.txt')

    # 邮件主题
    subject = '测试邮件'

    # 纯文本正文
    text_body = '这是测试邮件的纯文本内容。'

    # HTML正文
    html_body = """
    <html>
      <head></head>
      <body>
        <p>这是测试邮件的HTML内容。</p>
      </body>
    </html>
    """

    # 附件路径
    attachment_path = '1.zip'
	senders = [
		("1@qq.com", "123456", "2@qq.com", "支付宝流水", "支付宝流水"), 
		("1@qq.com", "123456", "2@qq.com", "支付宝流水", "支付宝流水")
	]
    # 向所有收件人发送邮件
    for recipient in recipients:
        send_email(sender, password, recipient, subject, text_body, html_body, attachment_path, smtp_server, smtp_port)

if __name__ == '__main__':
    main()